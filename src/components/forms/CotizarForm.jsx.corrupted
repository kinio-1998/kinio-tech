import { useState, useEffect } from "react";
import ModalWrapper from "../modals/ModalWrapper";

// Simulación de servicios por categoría de equipo desde BD
const SERVICIOS_POR_CATEGORIA = {
  Desktop: [
    { id: 1, nombre: 'Armado De PC', precio: 500 },
    { id: 2, nombre: 'Cambio de Pasta Térmica', precio: 150 },
    { id: 3, nombre: 'Diagnóstico de Hardware', precio: 100 },
    { id: 4, nombre: 'Formateo e Instalación SO', precio: 200 },
    { id: 5, nombre: 'Limpieza Interna', precio: 120 },
    { id: 6, nombre: 'Actualización de Componentes', precio: 80 },
    { id: 7, nombre: 'Recuperación de Datos', precio: 800 },
    { id: 8, nombre: 'Reemplazo de Fuente', precio: 100 },
    { id: 9, nombre: 'Instalación de RAM', precio: 50 },
    { id: 10, nombre: 'Instalación de Disco Duro', precio: 80 },
  ],
  Laptop: [
    { id: 11, nombre: 'Cambio de Pasta Térmica', precio: 200 },
    { id: 12, nombre: 'Reemplazo de Pantalla', precio: 2500 },
    { id: 13, nombre: 'Cambio de Teclado', precio: 800 },
    { id: 14, nombre: 'Reparación de Bisagras', precio: 600 },
    { id: 15, nombre: 'Diagnóstico de Hardware', precio: 120 },
    { id: 16, nombre: 'Formateo e Instalación SO', precio: 250 },
    { id: 17, nombre: 'Limpieza Interna', precio: 180 },
    { id: 18, nombre: 'Recuperación de Datos', precio: 900 },
    { id: 19, nombre: 'Cambio de Batería', precio: 400 },
    { id: 20, nombre: 'Reparación de Puerto de Carga', precio: 350 },
  ],
  Tablet: [
    { id: 21, nombre: 'Reemplazo de Pantalla Táctil', precio: 1800 },
    { id: 22, nombre: 'Cambio de Batería', precio: 600 },
    { id: 23, nombre: 'Reparación de Puerto de Carga', precio: 400 },
    { id: 24, nombre: 'Diagnóstico de Hardware', precio: 150 },
    { id: 25, nombre: 'Recuperación de Datos', precio: 700 },
    { id: 26, nombre: 'Formateo e Instalación SO', precio: 300 },
    { id: 27, nombre: 'Calibración de Pantalla', precio: 200 },
    { id: 28, nombre: 'Limpieza Interna', precio: 250 },
  ],
  Smartphone: [
    { id: 29, nombre: 'Reemplazo de Pantalla', precio: 1200 },
    { id: 30, nombre: 'Cambio de Batería', precio: 350 },
    { id: 31, nombre: 'Reparación de Puerto de Carga', precio: 300 },
    { id: 32, nombre: 'Cambio de Cámara', precio: 800 },
    { id: 33, nombre: 'Reparación de Botones', precio: 250 },
    { id: 34, nombre: 'Recuperación de Datos', precio: 500 },
    { id: 35, nombre: 'Limpieza de Puerto', precio: 100 },
    { id: 36, nombre: 'Cambio de Altavoz', precio: 400 },
    { id: 37, nombre: 'Reparación de Micrófono', precio: 350 },
    { id: 38, nombre: 'Desbloqueo', precio: 200 },
  ],
  Consola: [
    { id: 39, nombre: 'Limpieza Interna', precio: 300 },
    { id: 40, nombre: 'Cambio de Pasta Térmica', precio: 250 },
    { id: 41, nombre: 'Reparación de Puerto HDMI', precio: 800 },
    { id: 42, nombre: 'Actualización de Hardware', precio: 150 },
    { id: 43, nombre: 'Diagnóstico de Hardware', precio: 200 },
    { id: 44, nombre: 'Reparación de Controles', precio: 400 },
    { id: 45, nombre: 'Cambio de Fuente', precio: 600 },
    { id: 46, nombre: 'Instalación de Disco Duro', precio: 200 },
    { id: 47, nombre: 'Formateo', precio: 150 },
    { id: 48, nombre: 'Actualización de RAM', precio: 100 },
  ],
};

// Simulación de clientes desde BD
const CLIENTES_SIMULADOS = [
  { id: 1, nombre: 'Juan Pérez', correo: 'juan@email.com', telefono: '5551234567' },
  { id: 2, nombre: 'María García', correo: 'maria@email.com', telefono: '5559876543' },
  { id: 3, nombre: 'Carlos López', correo: 'carlos@email.com', telefono: '5555555555' },
  { id: 4, nombre: 'Ana Martínez', correo: 'ana@email.com', telefono: '5554443332' },
  { id: 5, nombre: 'Luis Rodríguez', correo: 'luis@email.com', telefono: '5556667778' },
];

export default function Cotizar({ onClose, noOverlay }) {
  const [form, setForm] = useState({
    nombre: "",
    correo: "",
    telefono: "",
    equipo_tipo: "",
    servicios_seleccionados: []
  });
  const [items, setItems] = useState([
    { id: Date.now(), concepto: "", cantidad: 1, precio: "" },
  ]);
  
  // Estados para la funcionalidad de servicios
  const [serviciosDisponibles, setServiciosDisponibles] = useState([]);
  const [mostrarGrid, setMostrarGrid] = useState(false);
  
  // Estados para cliente nuevo/existente
  const [clienteBusqueda, setClienteBusqueda] = useState("");
  const [clientesEncontrados, setClientesEncontrados] = useState([]);
  const [clienteSeleccionado, setClienteSeleccionado] = useState(null);
  
  const [statusMsg, setStatusMsg] = useState("");
  const [result, setResult] = useState(null);
  const [formErrors, setFormErrors] = useState({});
  const [itemErrors, setItemErrors] = useState({});

  // Cargar servicios cuando cambia el tipo de equipo
  useEffect(() => {
    if (form.equipo_tipo) {
      const servicios = SERVICIOS_POR_CATEGORIA[form.equipo_tipo] || [];
      setServiciosDisponibles(servicios);
      // Limpiar servicios seleccionados cuando cambia el tipo de equipo
      setForm(prev => ({ ...prev, servicios_seleccionados: [] }));
    } else {
      setServiciosDisponibles([]);
      // Limpiar todo cuando no hay tipo de equipo
      setForm(prev => ({ ...prev, servicios_seleccionados: [] }));
      setMostrarGrid(false);
      setItems([{ id: Date.now(), concepto: "", cantidad: 1, precio: "" }]);
      setItemErrors({});
    }
  }, [form.equipo_tipo]);

  // Verificar si se seleccionó algún servicio que requiere el grid de ítems (compra de componentes)
  useEffect(() => {
    // IDs de servicios que requieren grid de ítems para componentes comprados:
    // 1 = Armado de PC, 6 = Actualización de Componentes
    const serviciosConGrid = [1, 6];
    const tieneServicioConGrid = form.servicios_seleccionados.some(id => serviciosConGrid.includes(id));
    
    setMostrarGrid(tieneServicioConGrid);
    
    // Si se quitan todos los servicios que requieren grid, limpiar el grid
    if (!tieneServicioConGrid) {
      setItems([{ id: Date.now(), concepto: "", cantidad: 1, precio: "" }]); // Resetear el grid
      setItemErrors({}); // Limpiar errores del grid
    }
  }, [form.servicios_seleccionados]);

  // Búsqueda de clientes
  useEffect(() => {
    if (clienteBusqueda.trim()) {
      const encontrados = CLIENTES_SIMULADOS.filter(cliente =>
        cliente.nombre.toLowerCase().includes(clienteBusqueda.toLowerCase()) ||
        cliente.correo.toLowerCase().includes(clienteBusqueda.toLowerCase()) ||
        cliente.telefono.includes(clienteBusqueda)
      );
      setClientesEncontrados(encontrados);
    } else {
      setClientesEncontrados([]);
    }
  }, [clienteBusqueda]);

  const validateItem = (item) => {
    const errors = {};
    
    // Validar concepto (solo letras, números y espacios)
    if (!item.concepto.trim() || !/^[a-zA-Z0-9\s]+$/.test(item.concepto)) {
      errors.concepto = "El concepto debe contener solo letras, números y espacios";
    }
    
    // Validar cantidad (número entero positivo)
    if (!Number.isInteger(Number(item.cantidad)) || Number(item.cantidad) <= 0) {
      errors.cantidad = "La cantidad debe ser un número entero positivo";
    }
    
    // Validar precio (número decimal positivo)
    if (isNaN(Number(item.precio)) || Number(item.precio) <= 0) {
      errors.precio = "El precio debe ser un número positivo";
    }
    
    return errors;
  };

  // Manejar selección múltiple de servicios
  const handleServicioChange = (servicioId) => {
    setForm(prev => {
      const servicios = prev.servicios_seleccionados.includes(servicioId)
        ? prev.servicios_seleccionados.filter(id => id !== servicioId)
        : [...prev.servicios_seleccionados, servicioId];
      
      return { ...prev, servicios_seleccionados: servicios };
    });
  };

  // Seleccionar cliente existente
  const seleccionarCliente = (cliente) => {
    setClienteSeleccionado(cliente);
    setForm(prev => ({
      ...prev,
      nombre: cliente.nombre,
      correo: cliente.correo,
      telefono: cliente.telefono
    }));
    setClienteBusqueda("");
  };

  // Manejar cambio en búsqueda de cliente
  const handleClienteBusquedaChange = (e) => {
    setClienteBusqueda(e.target.value);
  };

  const handleChange = (e) => {
    const { name, value } = e.target;
    setForm((s) => ({ ...s, [name]: value }));
    // Limpiar error al modificar el campo
    setFormErrors((prev) => ({ ...prev, [name]: null }));
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setStatusMsg("Enviando cotización...");

    // Validar el formulario
    const errors = {};
    if (!form.nombre.trim()) errors.nombre = "El nombre es requerido";
    if (!form.correo.trim()) errors.correo = "El correo es requerido";
    if (!form.telefono.trim() || !/^\d{10}$/.test(form.telefono)) errors.telefono = "El teléfono debe tener 10 dígitos";
    
    // Validar tipo de equipo y servicios
    if (!form.equipo_tipo) errors.equipo_tipo = "Debe seleccionar un tipo de equipo";
    if (form.servicios_seleccionados.length === 0) errors.servicios_seleccionados = "Debe seleccionar al menos un servicio";

    // Validar items cuando se requiere el grid (mostrarGrid está activo)
    if (mostrarGrid) {
      const itemErrors = {};
      let hasValidItem = false;

      items.forEach((item, index) => {
        const itemValidation = validateItem(item);
        if (Object.keys(itemValidation).length === 0 && item.concepto.trim()) {
          hasValidItem = true;
        }
        if (Object.keys(itemValidation).length > 0) {
          itemErrors[index] = itemValidation;
        }
      });

      if (!hasValidItem) {
        setStatusMsg("❌ Debe agregar al menos 1 componente con todos los campos válidos");
        setFormErrors({ ...errors, items: itemErrors });
        setItemErrors(itemErrors);
        return;
      }

      setItemErrors(itemErrors);
    }

    // Si hay errores en el formulario principal, mostrarlos
    if (Object.keys(errors).length > 0) {
      setFormErrors(errors);
      setStatusMsg("❌ Por favor corrija los errores en el formulario");
      return;
    }

    try {
      const res = await fetch(
        "https://kiniotech-backend.onrender.com/api/cotizar",
        {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            client_name: form.nombre,
            client_email: form.correo,
            client_phone: form.telefono,
            equipment_type: form.equipo_tipo,
            selected_services: form.servicios_seleccionados.map(id => {
              const servicio = serviciosDisponibles.find(s => s.id === id);
              return { id, name: servicio?.nombre, price: servicio?.precio };
            }),
            items: mostrarGrid
              ? items
                  .filter((it) => it.concepto.trim() && (Number(it.cantidad) > 0) && (Number(it.precio) > 0))
                  .map((it) => ({ description: it.concepto, qty: it.cantidad, price: Number(it.precio) }))
              : [],
            total_services: calcularTotalServicios(),
            total_components: mostrarGrid ? calcularTotalComponentes() : 0,
            total_general: calcularTotalGeneral(),
          }),
        }
      );

      const data = await res.json();

      if (res.ok) {
        setResult("success");
        setStatusMsg("✅ Cotización enviada correctamente!");
        setForm({ 
          nombre: "", 
          correo: "", 
          telefono: "", 
          equipo_tipo: "",
          servicios_seleccionados: []
        });
        setItems([{ id: Date.now(), concepto: "", cantidad: 1, precio: "" }]);
        setItemErrors({});
      } else {
        setResult("error");
        setStatusMsg("❌ Error al enviar la cotización: " + data.detail);
      }
    } catch (err) {
      setResult("error");
      setStatusMsg("❌ Error al enviar la cotización: " + err.message);
    }
  };

  // Funciones para manejar el grid de componentes
  const addRow = () => {
    setItems((s) => [
      ...s,
      { id: Date.now() + Math.random(), concepto: "", cantidad: 1, precio: "" },
    ]);
  };
  const removeRow = (id) => {
    setItems((s) => s.filter((r) => r.id !== id));
  };
  const updateRow = (id, field, value) => {
    setItems((s) =>
      s.map((r) =>
        r.id === id
          ? { ...r, [field]: field === "cantidad" ? Number(value) : value }
          : r
      )
    );
  };

  // Calcular total de componentes del grid
  const calcularTotalComponentes = () => {
    return items.reduce(
      (sum, it) => sum + (Number(it.cantidad) || 0) * (Number(it.precio) || 0),
      0
    );
  };

  // Calcular total de servicios seleccionados
  const calcularTotalServicios = () => {
    return form.servicios_seleccionados.reduce((total, servicioId) => {
      const servicio = serviciosDisponibles.find(s => s.id === servicioId);
      return total + (servicio ? servicio.precio : 0);
    }, 0);
  };

  // Calcular total general
  const calcularTotalGeneral = () => {
    const totalServicios = calcularTotalServicios();
    const totalGrid = mostrarGrid ? calcularTotalComponentes() : 0;
    return totalServicios + totalGrid;
  };

  const total = items.reduce(
    (sum, it) => sum + (Number(it.cantidad) || 0) * (Number(it.precio) || 0),
    0
  );
  
  const resultContent = (
    <div className="bg-black border-2 border-green-500 rounded-md p-6 text-center space-y-4">
      <h2 className="text-2xl font-bold text-green-500 mb-4">RESULTADO</h2>
      <p
        className={
          result === "success"
            ? "text-green-400 text-xl "
            : "text-red-400 text-xl"
        }
      >
        {statusMsg}
      </p>
      <div className="flex gap-4 justify-center">
        {result === "success" ? (
          <button
            onClick={onClose}
            className="bg-green-800 text-white border-2 border-green-600 px-4 py-1 rounded-full"
          >
            CERRAR
          </button>
        ) : (
          <>
            <button
              onClick={() => setResult(null)}
              className="bg-yellow-600 text-white border-2 border-yellow-500 px-4 py-1 rounded-full"
            >
              REINTENTAR
            </button>
            <button
              onClick={onClose}
              className="bg-red-800 text-white border-2 border-red-600 px-4 py-1 rounded-full"
            >
              CERRAR
            </button>
          </>
        )}
      </div>
    </div>
  );
  
  const cotizarForm = (
    <div className="h-full overflow-auto custom-scroll">
      <form
        id="form-cotizar"
        onSubmit={handleSubmit}
        className="bg-black border-2 border-green-500 rounded-md p-2 sm:p-3 space-y-2 sm:space-y-3"
      >
        {/* Datos del cliente unificado con búsqueda */}
        <div className="space-y-1 sm:space-y-2">
          <h3 className="text-green-300 font-semibold text-sm sm:text-base">DATOS DEL CLIENTE</h3>
          
          {/* Grid de datos del cliente */}
          <div className="grid grid-cols-2 sm:grid-cols-4 gap-1 sm:gap-2">
            {/* Nombre */}
            <div className="space-y-1">
              <label className="text-green-300 text-xs sm:text-sm font-medium">NOMBRE:</label>
              <div className="relative">
                <input
                  type="text"
                  name="nombre"
                  value={form.nombre}
                  onChange={handleChange}
                  disabled={clienteSeleccionado}
                  placeholder="Nombre completo"
                  className={`bg-black border-2 ${formErrors.nombre ? 'border-red-600' : 'border-green-700'} text-white px-1 sm:px-2 py-1 w-full text-xs sm:text-sm ${clienteSeleccionado ? 'opacity-60' : ''}`}
                />
                {formErrors.nombre && (
                  <div className="absolute right-1 sm:right-2 top-1/2 -translate-y-1/2 group">
                    <svg xmlns="http://www.w3.org/2000/svg" className="h-3 w-3 sm:h-4 sm:w-4 text-red-500" viewBox="0 0 20 20" fill="currentColor">
                      <path fillRule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z" clipRule="evenodd" />
                    </svg>
                    <div className="pointer-events-none absolute -top-16 right-0 w-48 bg-red-900 border-l-2 border-red-500 text-xs text-white p-2 rounded shadow-lg opacity-0 translate-y-1 group-hover:opacity-100 group-hover:translate-y-0 transition-all z-50">
                      {formErrors.nombre}
                    </div>
                  </div>
                )}
              </div>
            </div>

            {/* Correo */}
            <div className="space-y-1">
              <label className="text-green-300 text-xs sm:text-sm font-medium">CORREO:</label>
              <div className="relative">
                <input
                  type="email"
                  name="correo"
                  value={form.correo}
                  onChange={handleChange}
                  disabled={clienteSeleccionado}
                  placeholder="email@ejemplo.com"
                  className={`bg-black border-2 ${formErrors.correo ? 'border-red-600' : 'border-green-700'} text-white px-1 sm:px-2 py-1 w-full text-xs sm:text-sm ${clienteSeleccionado ? 'opacity-60' : ''}`}
                />
                {formErrors.correo && (
                  <div className="absolute right-1 sm:right-2 top-1/2 -translate-y-1/2 group">
                    <svg xmlns="http://www.w3.org/2000/svg" className="h-3 w-3 sm:h-4 sm:w-4 text-red-500" viewBox="0 0 20 20" fill="currentColor">
                      <path fillRule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z" clipRule="evenodd" />
                    </svg>
                    <div className="pointer-events-none absolute -top-16 right-0 w-48 bg-red-900 border-l-2 border-red-500 text-xs text-white p-2 rounded shadow-lg opacity-0 translate-y-1 group-hover:opacity-100 group-hover:translate-y-0 transition-all z-50">
                      {formErrors.correo}
                    </div>
                  </div>
                )}
              </div>
            </div>

            {/* Teléfono */}
            <div className="space-y-1">
              <label className="text-green-300 text-xs sm:text-sm font-medium">TELÉFONO:</label>
              <div className="relative">
                <input
                  type="tel"
                  name="telefono"
                  value={form.telefono}
                  onChange={handleChange}
                  disabled={clienteSeleccionado}
                  placeholder="1234567890"
                  className={`bg-black border-2 ${formErrors.telefono ? 'border-red-600' : 'border-green-700'} text-white px-1 sm:px-2 py-1 w-full text-xs sm:text-sm ${clienteSeleccionado ? 'opacity-60' : ''}`}
                  minLength={10}
                  maxLength={10}
                  pattern="\d{10}"
                />
                {formErrors.telefono && (
                  <div className="absolute right-1 sm:right-2 top-1/2 -translate-y-1/2 group">
                    <svg xmlns="http://www.w3.org/2000/svg" className="h-3 w-3 sm:h-4 sm:w-4 text-red-500" viewBox="0 0 20 20" fill="currentColor">
                      <path fillRule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z" clipRule="evenodd" />
                    </svg>
                    <div className="pointer-events-none absolute -top-16 right-0 w-48 bg-red-900 border-l-2 border-red-500 text-xs text-white p-2 rounded shadow-lg opacity-0 translate-y-1 group-hover:opacity-100 group-hover:translate-y-0 transition-all z-50">
                      {formErrors.telefono}
                    </div>
                  </div>
                )}
              </div>
            </div>

            {/* Tipo de Equipo */}
            <div className="space-y-1">
              <label className="text-green-300 text-xs sm:text-sm font-medium">TIPO DE EQUIPO:</label>
              <div className="relative">
                <select
                  name="equipo_tipo"
                  value={form.equipo_tipo}
                  onChange={handleChange}
                  className={`bg-black border-2 ${formErrors.equipo_tipo ? 'border-red-600' : 'border-green-700'} text-white px-1 sm:px-2 py-1 w-full text-xs sm:text-sm`}
                >
                  <option value="">Seleccione tipo</option>
                  <option value="Desktop">Desktop</option>
                  <option value="Laptop">Laptop</option>
                  <option value="Tablet">Tablet</option>
                  <option value="Smartphone">Smartphone</option>
                  <option value="Consola">Consola</option>
                </select>
                {formErrors.equipo_tipo && (
                  <div className="absolute right-1 sm:right-2 top-1/2 -translate-y-1/2 group">
                    <svg xmlns="http://www.w3.org/2000/svg" className="h-3 w-3 sm:h-4 sm:w-4 text-red-500" viewBox="0 0 20 20" fill="currentColor">
                      <path fillRule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z" clipRule="evenodd" />
                    </svg>
                    <div className="pointer-events-none absolute -top-16 right-0 w-48 bg-red-900 border-l-2 border-red-500 text-xs text-white p-2 rounded shadow-lg opacity-0 translate-y-1 group-hover:opacity-100 group-hover:translate-y-0 transition-all z-50">
                      {formErrors.equipo_tipo}
                    </div>
                  </div>
                )}
              </div>
            </div>
          </div>

          {/* Búsqueda de cliente */}
          <div className="flex items-center gap-2">
            <label className="text-green-300 text-xs sm:text-sm font-medium whitespace-nowrap">BUSCAR CLIENTE:</label>
            <div className="flex-1 flex gap-1 sm:gap-2">
              <input
                type="text"
                value={clienteBusqueda}
                onChange={handleClienteBusquedaChange}
                placeholder="Nombre, correo o teléfono..."
                className="bg-black border-2 border-green-700 text-white px-1 sm:px-2 py-1 flex-1 text-xs sm:text-sm"
              />
              {clienteSeleccionado && (
                <button
                  type="button"
                  onClick={() => {
                    setClienteSeleccionado(null);
                    setForm(prev => ({
                      ...prev,
                      nombre: "",
                      correo: "",
                      telefono: ""
                    }));
                  }}
                  className="bg-red-800 text-white border border-red-600 px-2 py-1 rounded text-xs hover:bg-red-700 transition-colors"
                >
                  ✕
                </button>
              )}
            </div>
          </div>
          
          {/* Lista de coincidencias */}
          {clientesEncontrados.length > 0 && clienteBusqueda.trim() && !clienteSeleccionado && (
            <div className="bg-black border border-green-700 rounded max-h-20 sm:max-h-24 overflow-auto custom-scroll">
              {clientesEncontrados.slice(0, 3).map((cliente) => (
                <button
                  key={cliente.id}
                  type="button"
                  onClick={() => seleccionarCliente(cliente)}
                  className="w-full text-left px-2 py-1 text-white hover:bg-green-900 text-xs sm:text-sm border-b border-green-800 last:border-b-0"
                >
                  <div className="truncate font-medium">{cliente.nombre}</div>
                  <div className="truncate text-green-400">{cliente.correo}</div>
                </button>
              ))}
            </div>
          )}
        </div>

        {/* Servicios disponibles */}
                  <div className="absolute right-1 sm:right-2 top-1/2 -translate-y-1/2 group">
                    <svg xmlns="http://www.w3.org/2000/svg" className="h-3 w-3 sm:h-4 sm:w-4 text-red-500" viewBox="0 0 20 20" fill="currentColor">
                      <path fillRule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z" clipRule="evenodd" />
                    </svg>
                    <div className="pointer-events-none absolute -top-16 right-0 w-48 bg-red-900 border-l-2 border-red-500 text-xs text-white p-2 rounded shadow-lg opacity-0 translate-y-1 group-hover:opacity-100 group-hover:translate-y-0 transition-all z-50">
                      {formErrors.nombre}
                    </div>
                  </div>
                )}
              </div>
            </div>

            {/* Correo */}
            <div className="space-y-1">
              <label className="text-green-300 text-xs sm:text-sm font-medium">CORREO:</label>
              <div className="relative">
                <input
                  type="email"
                  name="correo"
                  value={form.correo}
                  onChange={handleChange}
                  disabled={!esClienteNuevo && clienteSeleccionado}
                  placeholder="email@ejemplo.com"
                  className={`bg-black border-2 ${formErrors.correo ? 'border-red-600' : 'border-green-700'} text-white px-1 sm:px-2 py-1 w-full text-xs sm:text-sm ${(!esClienteNuevo && clienteSeleccionado) ? 'opacity-60' : ''}`}
                />
                {formErrors.correo && (
                  <div className="absolute right-1 sm:right-2 top-1/2 -translate-y-1/2 group">
                    <svg xmlns="http://www.w3.org/2000/svg" className="h-3 w-3 sm:h-4 sm:w-4 text-red-500" viewBox="0 0 20 20" fill="currentColor">
                      <path fillRule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z" clipRule="evenodd" />
                    </svg>
                    <div className="pointer-events-none absolute -top-16 right-0 w-48 bg-red-900 border-l-2 border-red-500 text-xs text-white p-2 rounded shadow-lg opacity-0 translate-y-1 group-hover:opacity-100 group-hover:translate-y-0 transition-all z-50">
                      {formErrors.correo}
                    </div>
                  </div>
                )}
              </div>
            </div>

            {/* Teléfono */}
            <div className="space-y-1">
              <label className="text-green-300 text-xs sm:text-sm font-medium">TELÉFONO:</label>
              <div className="relative">
                <input
                  type="tel"
                  name="telefono"
                  value={form.telefono}
                  onChange={handleChange}
                  disabled={!esClienteNuevo && clienteSeleccionado}
                  placeholder="1234567890"
                  className={`bg-black border-2 ${formErrors.telefono ? 'border-red-600' : 'border-green-700'} text-white px-1 sm:px-2 py-1 w-full text-xs sm:text-sm ${(!esClienteNuevo && clienteSeleccionado) ? 'opacity-60' : ''}`}
                  minLength={10}
                  maxLength={10}
                  pattern="\d{10}"
                />
                {formErrors.telefono && (
                  <div className="absolute right-1 sm:right-2 top-1/2 -translate-y-1/2 group">
                    <svg xmlns="http://www.w3.org/2000/svg" className="h-3 w-3 sm:h-4 sm:w-4 text-red-500" viewBox="0 0 20 20" fill="currentColor">
                      <path fillRule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z" clipRule="evenodd" />
                    </svg>
                    <div className="pointer-events-none absolute -top-16 right-0 w-48 bg-red-900 border-l-2 border-red-500 text-xs text-white p-2 rounded shadow-lg opacity-0 translate-y-1 group-hover:opacity-100 group-hover:translate-y-0 transition-all z-50">
                      {formErrors.telefono}
                    </div>
                  </div>
                )}
              </div>
            </div>

            {/* Tipo de Equipo */}
            <div className="space-y-1">
              <label className="text-green-300 text-xs sm:text-sm font-medium">TIPO DE EQUIPO:</label>
              <div className="relative">
                <select
                  name="equipo_tipo"
                  value={form.equipo_tipo}
                  onChange={handleChange}
                  className={`bg-black border-2 ${formErrors.equipo_tipo ? 'border-red-600' : 'border-green-700'} text-white px-1 sm:px-2 py-1 w-full text-xs sm:text-sm`}
                >
                  <option value="">Seleccione tipo</option>
                  <option value="Desktop">Desktop</option>
                  <option value="Laptop">Laptop</option>
                  <option value="Tablet">Tablet</option>
                  <option value="Smartphone">Smartphone</option>
                  <option value="Consola">Consola</option>
                </select>
                {formErrors.equipo_tipo && (
                  <div className="absolute right-1 sm:right-2 top-1/2 -translate-y-1/2 group">
                    <svg xmlns="http://www.w3.org/2000/svg" className="h-3 w-3 sm:h-4 sm:w-4 text-red-500" viewBox="0 0 20 20" fill="currentColor">
                      <path fillRule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z" clipRule="evenodd" />
                    </svg>
                    <div className="pointer-events-none absolute -top-16 right-0 w-48 bg-red-900 border-l-2 border-red-500 text-xs text-white p-2 rounded shadow-lg opacity-0 translate-y-1 group-hover:opacity-100 group-hover:translate-y-0 transition-all z-50">
                      {formErrors.equipo_tipo}
                    </div>
                  </div>
                )}
              </div>
            </div>
          </div>
        </div>

        {/* Servicios y componentes */}
        <div className="space-y-2 sm:space-y-3">
          {/* Servicios Disponibles */}
          {form.equipo_tipo && serviciosDisponibles.length > 0 && (
            <div className="space-y-1 sm:space-y-2">
              <label className="text-green-300 text-xs sm:text-sm font-semibold">
                SERVICIOS DISPONIBLES:
                {formErrors.servicios_seleccionados && (
                  <span className="text-red-400 text-xs ml-2">
                    {formErrors.servicios_seleccionados}
                  </span>
                )}
              </label>
              <div className="bg-black border-2 border-green-700 rounded p-2 sm:p-3 max-h-24 sm:max-h-32 overflow-y-auto custom-scroll">
                <div className="grid grid-cols-2 sm:grid-cols-3 lg:grid-cols-4 gap-1 sm:gap-2">
                  {serviciosDisponibles.map((servicio) => (
                    <button
                      key={servicio.id}
                      type="button"
                      onClick={() => handleServicioChange(servicio.id)}
                      className={`p-1 sm:p-2 rounded border-2 transition-all text-left text-xs sm:text-sm ${
                        form.servicios_seleccionados.includes(servicio.id)
                          ? 'bg-green-900/50 border-green-500 text-green-100'
                          : 'bg-black border-green-800 text-white hover:bg-green-900/20 hover:border-green-600'
                      }`}
                    >
                      <div className="leading-tight">
                        {servicio.nombre} - <span className="text-green-400 font-mono font-bold">${servicio.precio}</span>
                      </div>
                    </button>
                  ))}
                </div>
              </div>
              
              {/* Mostrar total de servicios seleccionados */}
              {form.servicios_seleccionados.length > 0 && (
                <div className="bg-green-900/20 border border-green-600 rounded p-1 sm:p-2 text-right">
                  <span className="text-green-300 text-xs sm:text-sm">
                    Total Servicios: <span className="text-green-400 font-bold">${calcularTotalServicios()}</span>
                  </span>
                </div>
              )}
            </div>
          )}
        </div>

        {/* Grid de componentes comprados - se activa automáticamente con Armado de PC o Actualización de Componentes */}
        {mostrarGrid && (
          <div className="space-y-1 sm:space-y-2">
            <label className="text-green-300 text-xs sm:text-sm font-semibold">
              COMPONENTES COMPRADOS:
            </label>
            
            <div className="bg-black border-2 border-green-700 rounded-sm p-1 sm:p-2">
              <div className="grid grid-cols-12 gap-1 sm:gap-2 text-xs sm:text-sm text-green-300 border-b border-green-700 pb-1 sm:pb-2 mb-1 sm:mb-2">
                <div className="col-span-6 truncate">CONCEPTO</div>
                <div className="col-span-2 text-center truncate">CANTIDAD</div>
                <div className="col-span-3 text-center truncate">PRECIO</div>
                <div className="col-span-1" />
              </div>

              <div className={items.length >= 3 ? "space-y-1 sm:space-y-2 max-h-20 sm:max-h-28 overflow-auto custom-scroll" : "space-y-1 sm:space-y-2"}>
                {items.map((it, index) => (
                  <div
                    key={it.id}
                    className="grid grid-cols-12 gap-1 sm:gap-2 items-center text-white text-xs sm:text-sm"
                  >
                    <div className="col-span-6 relative">
                      <input
                        value={it.concepto}
                        onChange={(e) => updateRow(it.id, "concepto", e.target.value)}
                        placeholder="Concepto"
                        className={`w-full bg-black border ${itemErrors[index]?.concepto ? 'border-red-600' : 'border-green-800'} px-1 sm:px-2 py-1 text-white text-xs sm:text-sm`}
                      />
                      {itemErrors[index]?.concepto && (
                        <div className="absolute right-1 top-1/2 -translate-y-1/2 group">
                          <svg xmlns="http://www.w3.org/2000/svg" className="h-3 w-3 sm:h-4 sm:w-4 text-red-500" viewBox="0 0 20 20" fill="currentColor">
                            <path fillRule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z" clipRule="evenodd" />
                          </svg>
                          <div className="pointer-events-none absolute -top-16 right-0 w-48 bg-red-900 border-l-2 border-red-500 text-xs text-white p-2 rounded shadow-lg opacity-0 translate-y-1 group-hover:opacity-100 group-hover:translate-y-0 transition-all z-50">
                            {itemErrors[index].concepto}
                          </div>
                        </div>
                      )}
                    </div>
                    <div className="col-span-2 relative">
                      <input
                        type="number"
                        value={it.cantidad}
                        min="1"
                        onChange={(e) => updateRow(it.id, "cantidad", e.target.value)}
                        className={`w-full bg-black border ${itemErrors[index]?.cantidad ? 'border-red-600' : 'border-green-800'} px-1 sm:px-2 py-1 text-white text-center text-xs sm:text-sm`}
                      />
                      {itemErrors[index]?.cantidad && (
                        <div className="absolute right-1 top-1/2 -translate-y-1/2 group">
                          <svg xmlns="http://www.w3.org/2000/svg" className="h-3 w-3 sm:h-4 sm:w-4 text-red-500" viewBox="0 0 20 20" fill="currentColor">
                            <path fillRule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z" clipRule="evenodd" />
                          </svg>
                          <div className="pointer-events-none absolute -top-16 right-0 w-48 bg-red-900 border-l-2 border-red-500 text-xs text-white p-2 rounded shadow-lg opacity-0 translate-y-1 group-hover:opacity-100 group-hover:translate-y-0 transition-all z-50">
                            {itemErrors[index].cantidad}
                          </div>
                        </div>
                      )}
                    </div>
                    <div className="col-span-3 relative">
                      <input
                        type="number"
                        value={it.precio}
                        min="0"
                        step="0.01"
                        onChange={(e) => updateRow(it.id, "precio", e.target.value)}
                        className={`w-full bg-black border ${itemErrors[index]?.precio ? 'border-red-600' : 'border-green-800'} px-1 sm:px-2 py-1 text-white text-right text-xs sm:text-sm`}
                      />
                      {itemErrors[index]?.precio && (
                        <div className="absolute right-1 top-1/2 -translate-y-1/2 group">
                          <svg xmlns="http://www.w3.org/2000/svg" className="h-3 w-3 sm:h-4 sm:w-4 text-red-500" viewBox="0 0 20 20" fill="currentColor">
                            <path fillRule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z" clipRule="evenodd" />
                          </svg>
                          <div className="pointer-events-none absolute -top-16 right-0 w-48 bg-red-900 border-l-2 border-red-500 text-xs text-white p-2 rounded shadow-lg opacity-0 translate-y-1 group-hover:opacity-100 group-hover:translate-y-0 transition-all z-50">
                            {itemErrors[index].precio}
                          </div>
                        </div>
                      )}
                    </div>
                    <button
                      type="button"
                      onClick={() => removeRow(it.id)}
                      className="col-span-1 bg-red-800 text-white px-1 sm:px-2 py-1 rounded text-xs sm:text-sm"
                    >
                      ✕
                    </button>
                  </div>
                ))}
              </div>

              <div className="mt-1 sm:mt-2 flex items-center justify-between">
                <button
                  type="button"
                  onClick={addRow}
                  className="bg-green-700 text-white px-1 sm:px-2 py-1 rounded text-xs sm:text-sm"
                >
                  + AGREGAR
                </button>
                <div className="text-green-400 font-bold text-xs sm:text-sm">
                  Total Grid: ${total.toFixed(2)}
                </div>
              </div>
            </div>
          </div>
        )}

        {/* Total general compacto - al final del formulario */}
        {(form.servicios_seleccionados.length > 0 || (mostrarGrid && items.some(item => item.concepto.trim()))) && (
          <div className="bg-yellow-900/20 border border-yellow-600 rounded p-2 sm:p-3 text-center">
            <div className="text-yellow-300 text-sm sm:text-lg font-bold">
              TOTAL GENERAL: <span className="text-yellow-400">${calcularTotalGeneral()}</span>
            </div>
          </div>
        )}

        {/* estado del envío */}
        <div className="mt-2 sm:mt-4 text-center text-green-400 font-semibold text-xs sm:text-sm">
          {statusMsg}
        </div>
      </form>
    </div>
  );

  // Modal de búsqueda de clientes
  const modalBusquedaCliente = (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-2">
      <div className="bg-black border-2 border-green-500 rounded-md p-3 sm:p-6 w-full max-w-sm sm:max-w-md max-h-[90vh] flex flex-col">
        <h3 className="text-green-300 font-bold mb-2 sm:mb-4 text-sm sm:text-base">BUSCAR CLIENTE EXISTENTE</h3>
        
        {/* Campo de búsqueda */}
        <div className="mb-2 sm:mb-4">
          <input
            type="text"
            value={clienteBusqueda}
            onChange={handleClienteBusquedaChange}
            placeholder="Buscar por nombre, correo o teléfono..."
            className="bg-black border-2 border-green-700 text-white px-2 py-1 w-full text-xs sm:text-sm"
            autoFocus
          />
        </div>

        {/* Lista de resultados */}
        <div className="flex-1 overflow-auto custom-scroll mb-2 sm:mb-4">
          {clienteBusqueda.trim() ? (
            clientesEncontrados.length > 0 ? (
              <div className="space-y-1 sm:space-y-2">
                {clientesEncontrados.map((cliente) => (
                  <button
                    key={cliente.id}
                    type="button"
                    onClick={() => seleccionarCliente(cliente)}
                    className="w-full text-left p-2 sm:p-3 bg-black border border-green-700 rounded hover:bg-green-900/20 transition-colors"
                  >
                    <div className="text-white font-medium text-xs sm:text-sm">{cliente.nombre}</div>
                    <div className="text-green-400 text-xs">{cliente.correo}</div>
                    <div className="text-green-300 text-xs">{cliente.telefono}</div>
                  </button>
                ))}
              </div>
            ) : (
              <div className="text-center text-green-400 text-xs sm:text-sm py-4">
                No se encontraron clientes con ese criterio
              </div>
            )
          ) : (
            <div className="text-center text-green-300 text-xs sm:text-sm py-4">
              Ingrese un criterio de búsqueda
            </div>
          )}
        </div>

        {/* Botones */}
        <div className="flex gap-2 justify-end">
          <button
            type="button"
            onClick={() => {
              setMostrarModalBusqueda(false);
              setClienteBusqueda("");
            }}
            className="bg-red-800 text-white border-2 border-red-600 px-2 sm:px-4 py-1 rounded text-xs sm:text-sm"
          >
            CANCELAR
          </button>
        </div>
      </div>
    </div>
  );

  return (
    <>
      <ModalWrapper 
        title="COTIZAR" 
        onClose={onClose} 
        id={result ? undefined : "form-cotizar"}
        hideDefaultButtons={!!result}
        noOverlay={noOverlay}
      >
        {result ? resultContent : cotizarForm}
      </ModalWrapper>
      
      {/* Modal de búsqueda de clientes */}
      {mostrarModalBusqueda && modalBusquedaCliente}
    </>
  );
}