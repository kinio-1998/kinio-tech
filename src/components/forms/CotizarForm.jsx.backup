import { useState, useEffect } from "react";
import ModalWrapper from "../modals/ModalWrapper";

// Simulación de servicios por categoría de equipo desde BD
const SERVICIOS_POR_CATEGORIA = {
  Desktop: [
    { id: 1, nombre: 'Armado De PC', precio: 500 },
    { id: 2, nombre: 'Cambio de Pasta Térmica', precio: 150 },
    { id: 3, nombre: 'Diagnóstico de Hardware', precio: 100 },
    { id: 4, nombre: 'Formateo e Instalación SO', precio: 200 },
    { id: 5, nombre: 'Limpieza Interna', precio: 120 },
    { id: 6, nombre: 'Actualización de Componentes', precio: 80 },
    { id: 7, nombre: 'Recuperación de Datos', precio: 800 },
    { id: 8, nombre: 'Reemplazo de Fuente', precio: 100 },
    { id: 9, nombre: 'Instalación de RAM', precio: 50 },
    { id: 10, nombre: 'Instalación de Disco Duro', precio: 80 },
  ],
  Laptop: [
    { id: 11, nombre: 'Cambio de Pasta Térmica', precio: 200 },
    { id: 12, nombre: 'Reemplazo de Pantalla', precio: 2500 },
    { id: 13, nombre: 'Cambio de Teclado', precio: 800 },
    { id: 14, nombre: 'Reparación de Bisagras', precio: 600 },
    { id: 15, nombre: 'Diagnóstico de Hardware', precio: 120 },
    { id: 16, nombre: 'Formateo e Instalación SO', precio: 250 },
    { id: 17, nombre: 'Limpieza Interna', precio: 180 },
    { id: 18, nombre: 'Recuperación de Datos', precio: 900 },
    { id: 19, nombre: 'Cambio de Batería', precio: 400 },
    { id: 20, nombre: 'Reparación de Puerto de Carga', precio: 350 },
  ],
  Tablet: [
    { id: 21, nombre: 'Reemplazo de Pantalla Táctil', precio: 1800 },
    { id: 22, nombre: 'Cambio de Batería', precio: 600 },
    { id: 23, nombre: 'Reparación de Puerto de Carga', precio: 400 },
    { id: 24, nombre: 'Diagnóstico de Hardware', precio: 150 },
    { id: 25, nombre: 'Recuperación de Datos', precio: 700 },
    { id: 26, nombre: 'Formateo e Instalación SO', precio: 300 },
    { id: 27, nombre: 'Calibración de Pantalla', precio: 200 },
    { id: 28, nombre: 'Limpieza Interna', precio: 250 },
  ],
  Smartphone: [
    { id: 29, nombre: 'Reemplazo de Pantalla', precio: 1200 },
    { id: 30, nombre: 'Cambio de Batería', precio: 350 },
    { id: 31, nombre: 'Reparación de Puerto de Carga', precio: 300 },
    { id: 32, nombre: 'Cambio de Cámara', precio: 800 },
    { id: 33, nombre: 'Reparación de Botones', precio: 250 },
    { id: 34, nombre: 'Recuperación de Datos', precio: 500 },
    { id: 35, nombre: 'Limpieza de Puerto', precio: 100 },
    { id: 36, nombre: 'Cambio de Altavoz', precio: 400 },
    { id: 37, nombre: 'Reparación de Micrófono', precio: 350 },
    { id: 38, nombre: 'Desbloqueo', precio: 200 },
  ],
  Consola: [
    { id: 39, nombre: 'Limpieza Interna', precio: 300 },
    { id: 40, nombre: 'Cambio de Pasta Térmica', precio: 250 },
    { id: 41, nombre: 'Reparación de Puerto HDMI', precio: 800 },
    { id: 42, nombre: 'Actualización de Hardware', precio: 150 },
    { id: 43, nombre: 'Diagnóstico de Hardware', precio: 200 },
    { id: 44, nombre: 'Reparación de Controles', precio: 400 },
    { id: 45, nombre: 'Cambio de Fuente', precio: 600 },
    { id: 46, nombre: 'Instalación de Disco Duro', precio: 200 },
    { id: 47, nombre: 'Formateo', precio: 150 },
    { id: 48, nombre: 'Actualización de RAM', precio: 100 },
  ],
};

// Simulación de componentes para armado de PC desde BD
const COMPONENTES_SIMULADOS = {
  Procesador: [
    { id: 1, nombre: 'Intel Core i5-12400F', precio: 4500 },
    { id: 2, nombre: 'AMD Ryzen 5 5600X', precio: 5200 },
    { id: 3, nombre: 'Intel Core i7-12700K', precio: 7800 },
    { id: 4, nombre: 'AMD Ryzen 7 5700X', precio: 6900 },
  ],
  RAM: [
    { id: 5, nombre: 'Corsair Vengeance 16GB DDR4', precio: 1800 },
    { id: 6, nombre: 'Kingston Fury 32GB DDR4', precio: 3200 },
    { id: 7, nombre: 'G.Skill Trident 16GB DDR5', precio: 2400 },
    { id: 8, nombre: 'Crucial Ballistix 32GB DDR4', precio: 2900 },
  ],
  'Tarjeta Madre': [
    { id: 9, nombre: 'ASUS ROG STRIX B550-F', precio: 3500 },
    { id: 10, nombre: 'MSI MAG B460M', precio: 2200 },
    { id: 11, nombre: 'Gigabyte B550 AORUS', precio: 4100 },
    { id: 12, nombre: 'ASRock B450M PRO4', precio: 1800 },
  ],
  'Disco Duro': [
    { id: 13, nombre: 'Samsung 970 EVO 1TB NVMe', precio: 2800 },
    { id: 14, nombre: 'WD Blue 500GB SSD', precio: 1200 },
    { id: 15, nombre: 'Seagate Barracuda 2TB HDD', precio: 1500 },
    { id: 16, nombre: 'Crucial MX4 1TB SSD', precio: 2200 },
  ],
  'Tarjeta Gráfica': [
    { id: 17, nombre: 'NVIDIA RTX 4060', precio: 8500 },
    { id: 18, nombre: 'AMD RX 6600', precio: 6800 },
    { id: 19, nombre: 'NVIDIA RTX 4070', precio: 12000 },
    { id: 20, nombre: 'AMD RX 7600', precio: 7200 },
  ],
  Fuente: [
    { id: 21, nombre: 'Corsair CV650 650W', precio: 1800 },
    { id: 22, nombre: 'EVGA 600W Bronze', precio: 1400 },
    { id: 23, nombre: 'Seasonic Focus 750W Gold', precio: 2800 },
    { id: 24, nombre: 'Thermaltake Smart 500W', precio: 1100 },
  ],
  Gabinete: [
    { id: 25, nombre: 'Corsair 4000D Airflow', precio: 2400 },
    { id: 26, nombre: 'NZXT H510', precio: 1900 },
    { id: 27, nombre: 'Fractal Design Core 1000', precio: 1200 },
    { id: 28, nombre: 'Cooler Master MasterBox', precio: 1600 },
  ],
};

export default function Cotizar({ onClose, noOverlay }) {
  const [purchased, setPurchased] = useState(true);
  const [form, setForm] = useState({
    nombre: "",
    correo: "",
    telefono: "",
    servicio: "",
    // Nuevos campos para selección de servicios y componentes
    equipo_tipo: "",
    servicios_seleccionados: [],
    componentes: []
  });
  const [items, setItems] = useState([
    { id: Date.now(), concepto: "", cantidad: 1, precio: "" },
  ]);
  
  // Estados para la funcionalidad de servicios y componentes
  const [serviciosDisponibles, setServiciosDisponibles] = useState([]);
  const [componentesDisponibles, setComponentesDisponibles] = useState([]);
  const [mostrarComponentes, setMostrarComponentes] = useState(false);
  
  const [statusMsg, setStatusMsg] = useState("");
  const [result, setResult] = useState(null);
  const [formErrors, setFormErrors] = useState({});
  const [itemErrors, setItemErrors] = useState({});

  useEffect(() => {
    setComponentesDisponibles(COMPONENTES_SIMULADOS);
  }, []);

  // Cargar servicios cuando cambia el tipo de equipo
  useEffect(() => {
    if (form.equipo_tipo) {
      const servicios = SERVICIOS_POR_CATEGORIA[form.equipo_tipo] || [];
      setServiciosDisponibles(servicios);
      // Limpiar servicios seleccionados cuando cambia el tipo de equipo
      setForm(prev => ({ ...prev, servicios_seleccionados: [] }));
    } else {
      setServiciosDisponibles([]);
    }
  }, [form.equipo_tipo]);

  // Verificar si se seleccionó algún servicio que requiere componentes
  useEffect(() => {
    // IDs de servicios que requieren componentes:
    // 1 = Armado de PC, 6 = Actualización de Componentes, 42 = Actualización de Hardware, 48 = Actualización de RAM
    const serviciosConComponentes = [1, 6, 42, 48];
    const tieneServicioConComponentes = form.servicios_seleccionados.some(id => serviciosConComponentes.includes(id));
    
    setMostrarComponentes(tieneServicioConComponentes);
    
    // Si se quitan todos los servicios que requieren componentes, limpiar el grid
    if (!tieneServicioConComponentes) {
      setForm(prev => ({ ...prev, componentes: [] }));
      setItems([{ id: Date.now(), concepto: "", cantidad: 1, precio: "" }]); // Resetear el grid
      setItemErrors({}); // Limpiar errores del grid
    }
  }, [form.servicios_seleccionados]);

  const validateItem = (item) => {
    const errors = {};
    
    // Validar concepto (solo letras, números y espacios)
    if (!item.concepto.trim() || !/^[a-zA-Z0-9\s]+$/.test(item.concepto)) {
      errors.concepto = "El concepto debe contener solo letras, números y espacios";
    }
    
    // Validar cantidad (número entero positivo)
    if (!Number.isInteger(Number(item.cantidad)) || Number(item.cantidad) <= 0) {
      errors.cantidad = "La cantidad debe ser un número entero positivo";
    }
    
    // Validar precio (número decimal positivo)
    if (isNaN(Number(item.precio)) || Number(item.precio) <= 0) {
      errors.precio = "El precio debe ser un número positivo";
    }
    
    return errors;
  };

  // Manejar selección múltiple de servicios
  const handleServicioChange = (servicioId) => {
    setForm(prev => {
      const servicios = prev.servicios_seleccionados.includes(servicioId)
        ? prev.servicios_seleccionados.filter(id => id !== servicioId)
        : [...prev.servicios_seleccionados, servicioId];
      
      return { ...prev, servicios_seleccionados: servicios };
    });
  };

  // Manejar componentes para armado de PC
  const handleComponenteChange = (categoria, componenteId) => {
    setForm(prev => {
      const componentes = [...prev.componentes];
      const existeIndex = componentes.findIndex(c => c.categoria === categoria);
      
      if (existeIndex >= 0) {
        if (componenteId) {
          componentes[existeIndex] = { categoria, componenteId };
        } else {
          componentes.splice(existeIndex, 1);
        }
      } else if (componenteId) {
        componentes.push({ categoria, componenteId });
      }
      
      return { ...prev, componentes };
    });
  };

  const handleChange = (e) => {
    const { name, value } = e.target;
    setForm((s) => ({ ...s, [name]: value }));
    // Limpiar error al modificar el campo
    setFormErrors((prev) => ({ ...prev, [name]: null }));
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setStatusMsg("Enviando cotización...");

    // Validar el formulario
    const errors = {};
    if (!form.nombre.trim()) errors.nombre = "El nombre es requerido";
    if (!form.correo.trim()) errors.correo = "El correo es requerido";
    if (!form.telefono.trim() || !/^\d{10}$/.test(form.telefono)) errors.telefono = "El teléfono debe tener 10 dígitos";
    
    // Validar tipo de equipo y servicios
    if (!form.equipo_tipo) errors.equipo_tipo = "Debe seleccionar un tipo de equipo";
    if (form.servicios_seleccionados.length === 0) errors.servicios_seleccionados = "Debe seleccionar al menos un servicio";

    // Validar items cuando se requieren componentes o cuando purchased es true
    if (purchased || mostrarComponentes) {
      const itemErrors = {};
      let hasValidItem = false;

      items.forEach((item, index) => {
        const itemValidation = validateItem(item);
        if (Object.keys(itemValidation).length === 0 && item.concepto.trim()) {
          hasValidItem = true;
        }
        if (Object.keys(itemValidation).length > 0) {
          itemErrors[index] = itemValidation;
        }
      });

      if (mostrarComponentes && !hasValidItem) {
        setStatusMsg("❌ Debe agregar al menos 1 componente con todos los campos válidos");
        setFormErrors({ ...errors, items: itemErrors });
        setItemErrors(itemErrors);
        return;
      }

      if (purchased && !hasValidItem) {
        setStatusMsg("❌ Debe agregar al menos 1 ítem con todos los campos válidos");
        setFormErrors({ ...errors, items: itemErrors });
        setItemErrors(itemErrors);
        return;
      }

      setItemErrors(itemErrors);
    }

    // Si hay errores en el formulario principal, mostrarlos
    if (Object.keys(errors).length > 0) {
      setFormErrors(errors);
      setStatusMsg("❌ Por favor corrija los errores en el formulario");
      return;
    }

    try {
      const res = await fetch(
        "https://kiniotech-backend.onrender.com/api/cotizar",
        {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            client_name: form.nombre,
            client_email: form.correo,
            client_phone: form.telefono,
            equipment_type: form.equipo_tipo,
            selected_services: form.servicios_seleccionados.map(id => {
              const servicio = serviciosDisponibles.find(s => s.id === id);
              return { id, name: servicio?.nombre, price: servicio?.precio };
            }),
            components: form.componentes.map(comp => {
              const categoria = componentesDisponibles[comp.categoria];
              const componente = categoria?.find(c => c.id === comp.componenteId);
              return { 
                category: comp.categoria, 
                component: componente?.nombre, 
                price: componente?.precio 
              };
            }),
            items: (purchased || mostrarComponentes)
              ? items
                  .filter((it) => it.concepto.trim() && (Number(it.cantidad) > 0) && (Number(it.precio) > 0))
                  .map((it) => ({ description: it.concepto, qty: it.cantidad, price: Number(it.precio) }))
              : [],
            total_services: calcularTotalServicios(),
            total_components: mostrarComponentes ? calcularTotalComponentes() : 0,
            total_general: calcularTotalGeneral(),
          }),
        }
      );

      const data = await res.json();

      if (res.ok) {
        setResult("success");
        setStatusMsg("✅ Cotización enviada correctamente!");
        setForm({ 
          nombre: "", 
          correo: "", 
          telefono: "", 
          servicio: "",
          equipo_tipo: "",
          servicios_seleccionados: [],
          componentes: []
        });
        setItems([{ id: Date.now(), concepto: "", cantidad: 1, precio: "" }]);
        setItemErrors({});
      } else {
        setResult("error");
        setStatusMsg("❌ Error al enviar la cotización: " + data.detail);
      }
    } catch (err) {
      setResult("error");
      setStatusMsg("❌ Error al enviar la cotización: " + err.message);
    }
  };

  const addRow = () => {
    setItems((s) => [
      ...s,
      { id: Date.now() + Math.random(), concepto: "", cantidad: 1, precio: "" },
    ]);
  };
  const removeRow = (id) => {
    setItems((s) => s.filter((r) => r.id !== id));
  };
  const updateRow = (id, field, value) => {
    setItems((s) =>
      s.map((r) =>
        r.id === id
          ? { ...r, [field]: field === "cantidad" ? Number(value) : value }
          : r
      )
    );
  };

  // Calcular total de componentes del grid
  const calcularTotalComponentes = () => {
    return items.reduce(
      (sum, it) => sum + (Number(it.cantidad) || 0) * (Number(it.precio) || 0),
      0
    );
  };

  // Calcular total de servicios seleccionados
  const calcularTotalServicios = () => {
    return form.servicios_seleccionados.reduce((total, servicioId) => {
      const servicio = serviciosDisponibles.find(s => s.id === servicioId);
      return total + (servicio ? servicio.precio : 0);
    }, 0);
  };

  // Calcular total general
  const calcularTotalGeneral = () => {
    const totalServicios = calcularTotalServicios();
    const totalComponentes = mostrarComponentes ? calcularTotalComponentes() : 0;
    return totalServicios + totalComponentes;
  };

  const total = items.reduce(
    (sum, it) => sum + (Number(it.cantidad) || 0) * (Number(it.precio) || 0),
    0
  );
  
  const resultContent = (
    <div className="bg-black border-2 border-green-500 rounded-md p-6 text-center space-y-4">
      <h2 className="text-2xl font-bold text-green-500 mb-4">RESULTADO</h2>
      <p
        className={
          result === "success"
            ? "text-green-400 text-xl "
            : "text-red-400 text-xl"
        }
      >
        {statusMsg}
      </p>
      <div className="flex justify-center gap-4 mt-6">
        {result === "success" ? (
          <button
            onClick={onClose}
            className="bg-red-800 text-white border-2 border-red-600 px-4 py-1 rounded-full"
          >
            CERRAR
          </button>
        ) : (
          <>
            <button
              onClick={() => setResult(null)}
              className="bg-yellow-600 text-white border-2 border-yellow-500 px-4 py-1 rounded-full"
            >
              REINTENTAR
            </button>
            <button
              onClick={onClose}
              className="bg-red-800 text-white border-2 border-red-600 px-4 py-1 rounded-full"
            >
              CERRAR
            </button>
          </>
        )}
      </div>
    </div>
  );
  
  const cotizarForm = (
    <form
      id="form-cotizar"
      onSubmit={handleSubmit}
      className="bg-black border-2 border-green-500 rounded-md p-4"
    >
      {/* datos cliente en grid compacto */}
      <div className="mb-4">
        <h3 className="text-green-300 font-semibold mb-3 text-lg">DATOS DEL CLIENTE</h3>
        <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-3">
          {/* Nombre */}
          <div className="space-y-1">
            <label className="text-green-300 text-sm font-medium">NOMBRE:</label>
            <div className="relative">
              <input
                type="text"
                name="nombre"
                value={form.nombre}
                onChange={handleChange}
                placeholder="Nombre completo"
                className={`bg-black border-2 ${formErrors.nombre ? 'border-red-600' : 'border-green-700'} text-white px-2 py-2 w-full text-sm`}
              />
              {formErrors.nombre && (
                <div className="absolute right-2 top-1/2 -translate-y-1/2 group">
                  <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 text-red-500" viewBox="0 0 20 20" fill="currentColor">
                    <path fillRule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z" clipRule="evenodd" />
                  </svg>
                  <div className="pointer-events-none absolute -top-16 right-0 w-48 bg-red-900 border-l-2 border-red-500 text-xs text-white p-2 rounded shadow-lg opacity-0 translate-y-1 group-hover:opacity-100 group-hover:translate-y-0 transition-all z-50">
                    {formErrors.nombre}
                  </div>
                </div>
              )}
            </div>
          </div>

          {/* Correo */}
          <div className="space-y-1">
            <label className="text-green-300 text-sm font-medium">CORREO:</label>
            <div className="relative">
              <input
                type="email"
                name="correo"
                value={form.correo}
                onChange={handleChange}
                placeholder="email@ejemplo.com"
                className={`bg-black border-2 ${formErrors.correo ? 'border-red-600' : 'border-green-700'} text-white px-2 py-2 w-full text-sm`}
              />
              {formErrors.correo && (
                <div className="absolute right-2 top-1/2 -translate-y-1/2 group">
                  <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 text-red-500" viewBox="0 0 20 20" fill="currentColor">
                    <path fillRule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z" clipRule="evenodd" />
                  </svg>
                  <div className="pointer-events-none absolute -top-16 right-0 w-48 bg-red-900 border-l-2 border-red-500 text-xs text-white p-2 rounded shadow-lg opacity-0 translate-y-1 group-hover:opacity-100 group-hover:translate-y-0 transition-all z-50">
                    {formErrors.correo}
                  </div>
                </div>
              )}
            </div>
          </div>

          {/* Teléfono */}
          <div className="space-y-1">
            <label className="text-green-300 text-sm font-medium">TELÉFONO:</label>
            <div className="relative">
              <input
                type="tel"
                name="telefono"
                value={form.telefono}
                onChange={handleChange}
                placeholder="1234567890"
                className={`bg-black border-2 ${formErrors.telefono ? 'border-red-600' : 'border-green-700'} text-white px-2 py-2 w-full text-sm`}
                minLength={10}
                maxLength={10}
                pattern="\d{10}"
              />
              {formErrors.telefono && (
                <div className="absolute right-2 top-1/2 -translate-y-1/2 group">
                  <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 text-red-500" viewBox="0 0 20 20" fill="currentColor">
                    <path fillRule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z" clipRule="evenodd" />
                  </svg>
                  <div className="pointer-events-none absolute -top-16 right-0 w-48 bg-red-900 border-l-2 border-red-500 text-xs text-white p-2 rounded shadow-lg opacity-0 translate-y-1 group-hover:opacity-100 group-hover:translate-y-0 transition-all z-50">
                    {formErrors.telefono}
                  </div>
                </div>
              )}
            </div>
          </div>

          {/* Tipo de Equipo */}
          <div className="space-y-1">
            <label className="text-green-300 text-sm font-medium">TIPO DE EQUIPO:</label>
            <div className="relative">
              <select
                name="equipo_tipo"
                value={form.equipo_tipo}
                onChange={handleChange}
                className={`bg-black border-2 ${formErrors.equipo_tipo ? 'border-red-600' : 'border-green-700'} text-white px-2 py-2 w-full text-sm`}
              >
                <option value="">Seleccione tipo</option>
                <option value="Desktop">Desktop</option>
                <option value="Laptop">Laptop</option>
                <option value="Tablet">Tablet</option>
                <option value="Smartphone">Smartphone</option>
                <option value="Consola">Consola</option>
              </select>
              {formErrors.equipo_tipo && (
                <div className="absolute right-2 top-1/2 -translate-y-1/2 group">
                  <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 text-red-500" viewBox="0 0 20 20" fill="currentColor">
                    <path fillRule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z" clipRule="evenodd" />
                  </svg>
                  <div className="pointer-events-none absolute -top-16 right-0 w-48 bg-red-900 border-l-2 border-red-500 text-xs text-white p-2 rounded shadow-lg opacity-0 translate-y-1 group-hover:opacity-100 group-hover:translate-y-0 transition-all z-50">
                    {formErrors.equipo_tipo}
                  </div>
                </div>
              )}
            </div>
          </div>
        </div>
      </div>

      {/* Servicios y componentes */}
      <div className="space-y-4">
        {/* Servicios Disponibles */}
        {form.equipo_tipo && serviciosDisponibles.length > 0 && (
          <div className="space-y-2">
            <label className="text-green-300 text-sm sm:text-base font-semibold">
              SERVICIOS DISPONIBLES:
              {formErrors.servicios_seleccionados && (
                <span className="text-red-400 text-xs ml-2">
                  {formErrors.servicios_seleccionados}
                </span>
              )}
            </label>
            <div className="bg-black border-2 border-green-700 rounded p-3 max-h-48 overflow-y-auto custom-scroll">
              <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-2">
                {serviciosDisponibles.map((servicio) => (
                  <label
                    key={servicio.id}
                    className="flex flex-col gap-2 text-white hover:bg-green-900/20 p-2 rounded cursor-pointer border border-green-800"
                  >
                    <div className="flex items-center gap-2">
                      <input
                        type="checkbox"
                        checked={form.servicios_seleccionados.includes(servicio.id)}
                        onChange={() => handleServicioChange(servicio.id)}
                        className="w-4 h-4 text-green-600 bg-black border-green-400 rounded focus:ring-green-500 focus:ring-2"
                      />
                      <span className="text-green-400 font-mono text-sm font-bold">
                        ${servicio.precio}
                      </span>
                    </div>
                    <span className="text-sm leading-tight">
                      {servicio.nombre}
                    </span>
                  </label>
                ))}
              </div>
            </div>
          </div>
        )}

        {/* Resumen de servicios seleccionados */}
        {form.servicios_seleccionados.length > 0 && (
          <div className="bg-green-900/20 border-2 border-green-600 rounded p-3">
            <h4 className="text-green-300 font-semibold mb-2">Servicios Seleccionados:</h4>
            <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-2 mb-3">
              {form.servicios_seleccionados.map(servicioId => {
                const servicio = serviciosDisponibles.find(s => s.id === servicioId);
                return servicio ? (
                  <div key={servicioId} className="bg-black/30 border border-green-700 rounded p-2">
                    <div className="text-white text-xs font-medium leading-tight mb-1">
                      {servicio.nombre}
                    </div>
                    <div className="text-green-400 font-mono text-sm font-bold">
                      ${servicio.precio}
                    </div>
                  </div>
                ) : null;
              })}
            </div>
            <div className="border-t border-green-600 pt-2 mt-2">
              <div className="flex justify-between font-semibold">
                <span className="text-green-300">Total Servicios:</span>
                <span className="text-green-400">${calcularTotalServicios()}</span>
              </div>
            </div>
          </div>
        )}

        {/* Grid de componentes cuando se selecciona "Armado de PC" u otros servicios que requieren componentes */}
        {mostrarComponentes && (
          <div className="space-y-3">
            <label className="text-green-300 text-sm sm:text-base font-semibold">
              COMPONENTES PARA ARMADO DE PC:
            </label>
            
            {/* Selectores de componentes por categoría */}
            <div className="bg-black border-2 border-green-700 rounded p-3 space-y-3">
              {Object.entries(componentesDisponibles).map(([categoria, componentes]) => {
                const componenteSeleccionado = form.componentes.find(c => c.categoria === categoria);
                return (
                  <div key={categoria} className="space-y-1">
                    <label className="text-green-300 text-sm font-medium">
                      {categoria}:
                    </label>
                    <select
                      value={componenteSeleccionado?.componenteId || ""}
                      onChange={(e) => handleComponenteChange(categoria, e.target.value ? parseInt(e.target.value) : null)}
                      className="bg-black border-2 border-green-700 text-white px-2 py-1 w-full text-sm"
                    >
                      <option value="">Seleccionar {categoria}</option>
                      {componentes.map(comp => (
                        <option key={comp.id} value={comp.id}>
                          {comp.nombre} - ${comp.precio}
                        </option>
                      ))}
                    </select>
                  </div>
                );
              })}
            </div>

            {/* Resumen de componentes seleccionados */}
            {form.componentes.length > 0 && (
              <div className="bg-blue-900/20 border-2 border-blue-600 rounded p-3">
                <h4 className="text-blue-300 font-semibold mb-2">Componentes Seleccionados:</h4>
                <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-2">
                  {form.componentes.map((comp, index) => {
                    const categoria = componentesDisponibles[comp.categoria];
                    const componente = categoria?.find(c => c.id === comp.componenteId);
                    return componente ? (
                      <div key={index} className="bg-black/30 border border-blue-700 rounded p-2">
                        <div className="text-blue-300 text-xs font-medium mb-1">
                          {comp.categoria}
                        </div>
                        <div className="text-white text-xs leading-tight mb-1">
                          {componente.nombre}
                        </div>
                        <div className="text-blue-400 font-mono text-sm font-bold">
                          ${componente.precio}
                        </div>
                      </div>
                    ) : null;
                  })}
                </div>
              </div>
            )}
          </div>
        )}

        {/* Total general */}
        {(form.servicios_seleccionados.length > 0 || mostrarComponentes) && (
          <div className="bg-gray-900/50 border-2 border-gray-600 rounded p-3">
            <div className="space-y-1 text-sm">
              <div className="flex justify-between">
                <span className="text-gray-300">Subtotal Servicios:</span>
                <span className="text-gray-400">${calcularTotalServicios()}</span>
              </div>
              {mostrarComponentes && (
                <div className="flex justify-between">
                  <span className="text-gray-300">Subtotal Componentes:</span>
                  <span className="text-gray-400">${calcularTotalComponentes()}</span>
                </div>
              )}
              <div className="border-t border-gray-600 pt-2 mt-2">
                <div className="flex justify-between font-bold text-lg">
                  <span className="text-white">TOTAL GENERAL:</span>
                  <span className="text-green-400">${calcularTotalGeneral()}</span>
                </div>
              </div>
            </div>
          </div>
        )}
      </div>

      {/* Campo Legacy para compatibilidad */}
      <div className="mt-4">
        <label className="flex flex-col sm:flex-row sm:items-center sm:justify-between text-green-300 gap-1">
          <span className="text-sm sm:text-base">SERVICIO LEGACY:</span>
          <div className="relative w-full sm:w-56">
            <select
              name="servicio"
              value={form.servicio}
              onChange={handleChange}
              className={`bg-black border-2 ${formErrors.servicio ? 'border-red-600' : 'border-green-700'} text-white px-2 py-1 w-full text-sm sm:text-base`}
            >
            <option value="">Seleccione servicio</option>
            <option value="1">Armado De PC</option>
            <option value="2">Cambio de Pasta</option>
            <option value="3">Diagnóstico</option>
            <option value="4">Formateo</option>
            <option value="5">Limpieza Física</option>
            <option value="6">Limpieza y Cambio de Pasta</option>
            <option value="7">Recuperación de Datos</option>
            <option value="8">Reemplazo de Disco Duro</option>
            <option value="9">Reemplazo de RAM</option>
            </select>
            {formErrors.servicio && (
              <div className="absolute right-2 top-1/2 -translate-y-1/2 group">
                <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 text-red-500" viewBox="0 0 20 20" fill="currentColor">
                  <path fillRule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z" clipRule="evenodd" />
                </svg>
                <div className="pointer-events-none absolute -top-12 right-0 w-64 bg-red-900 border-l-2 border-red-500 text-sm text-white p-2 rounded shadow-lg opacity-0 translate-y-1 group-hover:opacity-100 group-hover:translate-y-0 transition-all z-50">
                  {formErrors.servicio}
                </div>
              </div>
            )}
          </div>
        </label>
      </div>

      {/* switch que controla la visibilidad del grid (debe quedar FUERA del grid) */}
      <div className="flex items-center justify-between mt-2">
        <div className="flex items-center gap-3">
          <span className="text-green-300">¿Se compró algo?</span>
          <label className="relative inline-flex items-center cursor-pointer ml-2">
            <input
              type="checkbox"
              checked={purchased}
              onChange={(e) => setPurchased(e.target.checked)}
              className="sr-only peer"
              aria-label="Se compró algo"
            />
            <div className="w-11 h-6 bg-gray-800 rounded-full peer-checked:bg-green-500 transition-colors" />
            <div className="absolute left-1 top-1 w-4 h-4 bg-white rounded-full transition-transform peer-checked:translate-x-5" />
          </label>
        </div>
        <small className="text-xs text-green-400">Muestra/oculta la tabla de ítems</small>
      </div>

      {/* grid principal: se oculta/visualiza COMPLETO */}
      {purchased ? (
        <div className="mt-2 bg-black border-2 border-green-700 rounded-sm p-2">
          <div className="grid grid-cols-12 gap-1 sm:gap-2 text-xs sm:text-sm text-green-300 border-b border-green-700 pb-2 mb-2">
            <div className="col-span-6 truncate">CONCEPTO</div>
            <div className="col-span-2 text-center truncate">CANTIDAD</div>
            <div className="col-span-3 text-center truncate">PRECIO</div>
            <div className="col-span-1" />
          </div>

          <div className={items.length >= 3 ? "space-y-2 max-h-24 md:max-h-28 overflow-auto custom-scroll" : "space-y-2"}>
            {items.map((it, index) => (
              <div
                key={it.id}
                className="grid grid-cols-12 gap-1 sm:gap-2 items-center text-white text-xs sm:text-sm"
              >
                <div className="col-span-6 relative">
                  <input
                    value={it.concepto}
                    onChange={(e) => updateRow(it.id, "concepto", e.target.value)}
                    placeholder="Concepto"
                    className={`w-full bg-black border ${itemErrors[index]?.concepto ? 'border-red-600' : 'border-green-800'} px-1 sm:px-2 py-1 text-white text-xs sm:text-sm`}
                  />
                  {itemErrors[index]?.concepto && (
                    <div className="absolute right-1 top-1/2 -translate-y-1/2 group">
                      <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 text-red-500" viewBox="0 0 20 20" fill="currentColor">
                        <path fillRule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z" clipRule="evenodd" />
                      </svg>
                      <div className="pointer-events-none absolute -top-16 right-0 w-48 bg-red-900 border-l-2 border-red-500 text-xs text-white p-2 rounded shadow-lg opacity-0 translate-y-1 group-hover:opacity-100 group-hover:translate-y-0 transition-all z-50">
                        {itemErrors[index].concepto}
                      </div>
                    </div>
                  )}
                </div>
                <div className="col-span-2 relative">
                  <input
                    type="number"
                    value={it.cantidad}
                    min="1"
                    onChange={(e) => updateRow(it.id, "cantidad", e.target.value)}
                    className={`w-full bg-black border ${itemErrors[index]?.cantidad ? 'border-red-600' : 'border-green-800'} px-1 sm:px-2 py-1 text-white text-center text-xs sm:text-sm`}
                  />
                  {itemErrors[index]?.cantidad && (
                    <div className="absolute right-1 top-1/2 -translate-y-1/2 group">
                      <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 text-red-500" viewBox="0 0 20 20" fill="currentColor">
                        <path fillRule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z" clipRule="evenodd" />
                      </svg>
                      <div className="pointer-events-none absolute -top-16 right-0 w-48 bg-red-900 border-l-2 border-red-500 text-xs text-white p-2 rounded shadow-lg opacity-0 translate-y-1 group-hover:opacity-100 group-hover:translate-y-0 transition-all z-50">
                        {itemErrors[index].cantidad}
                      </div>
                    </div>
                  )}
                </div>
                <div className="col-span-3 relative">
                  <input
                    type="number"
                    value={it.precio}
                    min="0"
                    step="0.01"
                    onChange={(e) => updateRow(it.id, "precio", e.target.value)}
                    className={`w-full bg-black border ${itemErrors[index]?.precio ? 'border-red-600' : 'border-green-800'} px-1 sm:px-2 py-1 text-white text-right text-xs sm:text-sm`}
                  />
                  {itemErrors[index]?.precio && (
                    <div className="absolute right-1 top-1/2 -translate-y-1/2 group">
                      <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 text-red-500" viewBox="0 0 20 20" fill="currentColor">
                        <path fillRule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z" clipRule="evenodd" />
                      </svg>
                      <div className="pointer-events-none absolute -top-16 right-0 w-48 bg-red-900 border-l-2 border-red-500 text-xs text-white p-2 rounded shadow-lg opacity-0 translate-y-1 group-hover:opacity-100 group-hover:translate-y-0 transition-all z-50">
                        {itemErrors[index].precio}
                      </div>
                    </div>
                  )}
                </div>
                <button
                  type="button"
                  onClick={() => removeRow(it.id)}
                  className="col-span-1 bg-red-800 text-white px-2 py-1 rounded"
                >
                  ✕
                </button>
              </div>
            ))}
          </div>

          <div className="mt-2 flex items-center justify-between">
            <button
              type="button"
              onClick={addRow}
              className="bg-green-700 text-white px-3 py-1 rounded-full"
            >
              AGREGAR ITEM
            </button>
            <div className="text-white">
              Total: {" "}
              <span className="text-green-300 font-bold">${total.toFixed(2)}</span>
            </div>
          </div>
        </div>
      ) : null}
    </form>
  );

  return (
    <ModalWrapper 
      title="COTIZAR" 
      onClose={onClose} 
      id={result ? undefined : "form-cotizar"}
      hideDefaultButtons={!!result}
      noOverlay={noOverlay}
    >
      {result ? resultContent : cotizarForm}
    </ModalWrapper>
  );
}
